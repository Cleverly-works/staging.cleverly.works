"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6096,4972],{4972:function(n,e,t){t.d(e,{A5:function(){return nc},Ak:function(){return z},Cj:function(){return X},K4:function(){return no},Oq:function(){return nu},Qn:function(){return N},RJ:function(){return K},SW:function(){return R},T_:function(){return J},UH:function(){return D},UM:function(){return nr},Ve:function(){return Y},_d:function(){return O},_f:function(){return ni},by:function(){return W},cz:function(){return G},he:function(){return Q},j$:function(){return M},kB:function(){return ne},kU:function(){return nn},kx:function(){return V},nD:function(){return U},nP:function(){return ns},pY:function(){return na},qd:function(){return L},t1:function(){return B},yR:function(){return H},zR:function(){return nt}});var r=t(7297),i=t(75063);function o(){var n=(0,r.Z)(["\n  query GetAddressForSelect($q: String, $entity: String!, $entityId: Int!) {\n    items: Address(\n      where: {\n        Address_Entities: { entity: { _eq: $entity }, entityId: { _eq: $entityId } }\n        _or: [\n          { addressLine1: { _eq: $q } }\n          { addressLine2: { _eq: $q } }\n          { addressLine3: { _eq: $q } }\n          { county: { _eq: $q } }\n          { postCode: { _eq: $q } }\n          { city: { _eq: $q } }\n        ]\n      }\n    ) {\n      label: addressLine1\n      value: id\n      id\n      name\n      addressLine1\n      addressLine2\n      addressLine3\n      postCode\n      county\n      country: Country {\n        name\n      }\n      city\n      Address_Entities {\n        invoice\n      }\n    }\n  }\n"]);return o=function(){return n},n}function a(){var n=(0,r.Z)(["\n  query GetAccountsForSelect($q: String, $type: String, $limit: Int, $offset: Int) {\n    items: Account(\n      where: { name: { _ilike: $q }, type: { _eq: $type } }\n      limit: $limit\n      offset: $offset\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n"]);return a=function(){return n},n}function s(){var n=(0,r.Z)(['\n  query GetTaxonomy($q: String, $id: Int) {\n    items: Taxonomy(\n      where: { type: { _eq: "assetCategory" }, status: { _eq: "active" } }\n      order_by: { name: asc }\n    ) {\n      label: name\n      options: Taxonomies(\n        where: {\n          type: { _eq: "assetCategory" }\n          name: { _ilike: $q }\n          id: { _eq: $id }\n          status: { _eq: "active" }\n        }\n        order_by: { name: asc }\n      ) {\n        value: id\n        label: name\n      }\n    }\n  }\n']);return s=function(){return n},n}function u(){var n=(0,r.Z)(["\n  query GetAssetsForSelect(\n    $locationId: Int\n    $q: String\n    $categoryId: Int\n    $bookable: String\n    $limit: Int\n    $offset: Int\n  ) {\n    items: Asset(\n      where: {\n        categoryId: { _eq: $categoryId }\n        locationId: { _eq: $locationId }\n        name: { _ilike: $q }\n        bookable: { _eq: $bookable }\n      }\n      limit: $limit\n      offset: $offset\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n"]);return u=function(){return n},n}function c(){var n=(0,r.Z)(['\n  query GetCustomersForSelect($q: String, $limit: Int, $offset: Int) {\n    items: Account(\n      where: { name: { _ilike: $q }, type: { _eq: "customer" } }\n      limit: $limit\n      offset: $offset\n      order_by: { name: asc }\n    ) {\n      admin: Admins {\n        id: adminId\n      }\n      label: name\n      spendThreshold: meta(path: "$.finance.spendThreshold")\n      serviceRateLabour: meta(path: "$.finance.serviceRateLabour")\n      serviceRateExpenses: meta(path: "$.finance.serviceRateExpenses")\n      value: id\n    }\n  }\n']);return c=function(){return n},n}function l(){var n=(0,r.Z)(["\n  query GetJobsForSelect($_q: Int, $locationId: Int) {\n    items: Job(\n      where: {\n        Location: { id: { _eq: $locationId } }\n        _or: [{ id: { _eq: $_q } }, { Invoices: { id: { _eq: $_q } } }]\n      }\n      order_by: { title: asc }\n    ) {\n      label: label\n      value: id\n      number\n      createdAt\n      description\n      status\n      timingStart\n      title\n      type\n      Location {\n        name\n      }\n      Taxonomy {\n        Taxonomy {\n          shortJobDescription: name\n        }\n      }\n    }\n  }\n"]);return l=function(){return n},n}function d(){var n=(0,r.Z)(['\n  query GetManagersForSelect($userId: Int, $accountId: Int!, $q: String) {\n    items: User(\n      where: {\n        status: { _eq: "active" }\n        Account_Users: {\n          role: { _in: ["owner", "manager"] }\n          status: { _eq: "active" }\n          Account: { id: { _eq: $accountId } }\n        }\n        _or: [{ nameFirst: { _ilike: $q } }, { nameLast: { _ilike: $q } }]\n        id: { _neq: $userId }\n      }\n      order_by: { nameFirst: asc }\n    ) {\n      label: fullName\n      value: id\n    }\n  }\n']);return d=function(){return n},n}function f(){var n=(0,r.Z)(['\n  query GetManagersForSelect(\n    $userId: Int\n    $accountId: Int!\n    $q: String\n    $invoiceThreshold: numeric\n    $quoteThreshold: numeric\n  ) {\n    items: User(\n      where: {\n        status: { _eq: "active" }\n        Account_Users: {\n          role: { _in: ["owner", "manager"] }\n          status: { _eq: "active" }\n          Account: { id: { _eq: $accountId } }\n        }\n        _or: [{ nameFirst: { _ilike: $q } }, { nameLast: { _ilike: $q } }]\n        id: { _neq: $userId }\n        _and: [\n          {\n            _or: [\n              { invoiceThreshold: { _gt: $invoiceThreshold } }\n              { invoiceThreshold: { _is_null: true } }\n            ]\n          }\n          {\n            _or: [\n              { quoteThreshold: { _gt: $quoteThreshold } }\n              { quoteThreshold: { _is_null: true } }\n            ]\n          }\n        ]\n      }\n      order_by: { nameFirst: asc }\n    ) {\n      label: fullName\n      value: id\n    }\n  }\n']);return f=function(){return n},n}function m(){var n=(0,r.Z)(["\n  query GetPostCodeAreaForSelect($countryId: Int, $q: String) {\n    items: PostcodeArea(\n      where: { name: { _ilike: $q }, countryId: { _eq: $countryId } }\n      order_by: { name: asc }\n    ) {\n      area\n      label: name\n      value: id\n    }\n  }\n"]);return m=function(){return n},n}function y(){var n=(0,r.Z)(['\n  query GetPropertiesForSelect($where: Location_bool_exp, $limit: Int, $offset: Int) {\n    items: Location(where: $where, order_by: { name: asc }, limit: $limit, offset: $offset) {\n      label: name\n      value: id\n      access\n      permitsRequired\n      registeredAddress: Addresses(\n        where: { entity: { _eq: "Location" }, registered: { _eq: true } }\n      ) {\n        address: Address {\n          id\n          addressLine1\n          addressLine2\n          addressLine3\n          county\n          country: Country {\n            name\n          }\n          postCode\n          city\n        }\n      }\n    }\n  }\n']);return y=function(){return n},n}function $(){var n=(0,r.Z)(['\n  query GetServicesForSelect($q: String, $limit: Int, $offset: Int) {\n    items: Service(\n      where: { name: { _ilike: $q }, status: { _eq: "active" } }\n      limit: $limit\n      offset: $offset\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n']);return $=function(){return n},n}function g(){var n=(0,r.Z)(["\n  query GetSlasForSelect($q: String, $adminId: Int, $type: String) {\n    items: SLA(\n      where: { name: { _ilike: $q }, type: { _eq: $type }, adminId: { _eq: $adminId } }\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n"]);return g=function(){return n},n}function _(){var n=(0,r.Z)(["\n  query GetSlasForSelectNew($where: SLA_bool_exp, $limit: Int, $offset: Int) {\n    items: SLA(where: $where, order_by: { name: asc }, limit: $limit, offset: $offset) {\n      label: name\n      value: id\n    }\n  }\n"]);return _=function(){return n},n}function p(){var n=(0,r.Z)(["\n  query GetSuppliersForSelect($where: Account_bool_exp, $limit: Int, $offset: Int) {\n    items: Account(where: $where, limit: $limit, offset: $offset, order_by: { name: asc }) {\n      label: name\n      value: id\n    }\n  }\n"]);return p=function(){return n},n}function q(){var n=(0,r.Z)(['\n  query GetUsersForSelect($accountId: Int, $q: String, $limit: Int, $offset: Int) {\n    items: User(\n      where: {\n        status: { _eq: "active" }\n        Account_Users: {\n          accountId: { _eq: $accountId }\n          isContact: { _eq: true }\n          status: { _eq: "active" }\n        }\n        _or: [{ nameFirst: { _ilike: $q } }, { nameLast: { _ilike: $q } }]\n      }\n      order_by: { nameFirst: asc }\n      limit: $limit\n      offset: $offset\n    ) {\n      label: fullName\n      value: id\n      email\n      phone\n    }\n  }\n']);return q=function(){return n},n}function I(){var n=(0,r.Z)(['\n  query GetUsersForSelect($q: String) {\n    items: User(\n      where: {\n        status: { _eq: "active" }\n        _or: [{ nameFirst: { _ilike: $q } }, { nameLast: { _ilike: $q } }]\n      }\n      order_by: { nameFirst: asc }\n    ) {\n      label: fullName\n      value: id\n      email\n      phone\n    }\n  }\n']);return I=function(){return n},n}function v(){var n=(0,r.Z)(["\n  query GetTaxonomyGroupForSelect($q: String, $type: String!) {\n    items: Taxonomy(\n      where: { isGroup: { _eq: true }, name: { _ilike: $q }, type: { _eq: $type } }\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n"]);return v=function(){return n},n}function h(){var n=(0,r.Z)(['\n  query GetTaxonomy($q: String) {\n    items: Taxonomy(where: { type: { _eq: "expenseCategoryGroup" } }, order_by: { name: asc }) {\n      label: name\n      options: Taxonomies(\n        where: { type: { _eq: "expenseCategory" }, name: { _ilike: $q } }\n        order_by: { name: asc }\n      ) {\n        value: id\n        label: name\n      }\n    }\n  }\n']);return h=function(){return n},n}function b(){var n=(0,r.Z)(['\n  query GetCompliancesForSelect($q: String, $locationId: Int, $limit: Int, $offset: Int) {\n    items: Taxonomy(\n      where: { type: { _eq: "complianceCategory" } }\n      order_by: { name: asc }\n      limit: $limit\n      offset: $offset\n    ) {\n      label: name\n      options: Compliances(\n        where: {\n          name: { _ilike: $q }\n          Compliance_Entities: { Location: { id: { _eq: $locationId } } }\n        }\n        order_by: { name: asc }\n      ) {\n        value: id\n        label: name\n      }\n    }\n  }\n']);return b=function(){return n},n}function x(){var n=(0,r.Z)(["\n  query GetUserRole($userId: Int!, $accountId: Int!) {\n    accountUsers: Account_User(\n      where: { userId: { _eq: $userId }, accountId: { _eq: $accountId } }\n    ) {\n      role\n    }\n  }\n"]);return x=function(){return n},n}function Z(){var n=(0,r.Z)(["\n  query GetSublocationsForSelect($locationId: Int!, $q: String, $limit: Int, $offset: Int) {\n    items: Sublocation(\n      where: { name: { _ilike: $q }, locationId: { _eq: $locationId }, active: { _eq: true } }\n      limit: $limit\n      offset: $offset\n      order_by: { createdAt: desc }\n    ) {\n      value: id\n      label: name\n    }\n  }\n"]);return Z=function(){return n},n}function T(){var n=(0,r.Z)(['\n  query GetTaxonomy($q: String, $limit: Int, $offset: Int) {\n    items: Taxonomy(\n      where: {\n        type: { _eq: "assetCategory" }\n        isGroup: { _eq: false }\n        status: { _eq: "active" }\n        name: { _ilike: $q }\n      }\n      limit: $limit\n      offset: $offset\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n']);return T=function(){return n},n}function S(){var n=(0,r.Z)(["\n  query GetTaxonomyForSelect(\n    $where: Taxonomy_bool_exp\n    $limit: Int\n    $offset: Int\n    $orderBy: Taxonomy_order_by!\n    $includeMeta: Boolean! = false\n  ) {\n    items: Taxonomy(where: $where, limit: $limit, offset: $offset, order_by: [$orderBy]) {\n      value: id\n      label: name\n      meta @include(if: $includeMeta)\n    }\n  }\n"]);return S=function(){return n},n}function w(){var n=(0,r.Z)(['\n  query GetTagsForTask($q: String!, $limit: Int = 50, $offset: Int = 0) {\n    items: Taxonomy(\n      where: { name: { _ilike: $q }, status: { _eq: "active" }, type: { _eq: "taskTags" } }\n      limit: $limit\n      offset: $offset\n      order_by: { id: desc }\n    ) {\n      value: id\n      label: name\n    }\n  }\n']);return w=function(){return n},n}function P(){var n=(0,r.Z)(['\n  query GetTagsForEntity(\n    $entityId: Int\n    $entity: String!\n    $q: String!\n    $limit: Int = 50\n    $offset: Int = 0\n  ) {\n    tags: Taxonomy(\n      where: {\n        name: { _ilike: $q }\n        status: { _eq: "active" }\n        type: { _eq: "taskTags" }\n        _not: { Taxonomy_Entities: { entity: { _eq: $entity }, entityId: { _eq: $entityId } } }\n      }\n      limit: $limit\n      offset: $offset\n      order_by: { id: desc }\n    ) {\n      id\n      name\n      meta\n    }\n  }\n']);return P=function(){return n},n}function j(){var n=(0,r.Z)(['\n  query GetEntityTags($entityId: Int!, $entity: String!) {\n    tags: Taxonomy_Entity(\n      where: {\n        entity: { _eq: $entity }\n        entityId: { _eq: $entityId }\n        Taxonomy: { status: { _eq: "active" }, type: { _eq: "taskTags" } }\n      }\n      order_by: { id: desc }\n    ) {\n      id\n      tag: Taxonomy {\n        id\n        name\n        meta\n      }\n    }\n  }\n']);return j=function(){return n},n}function k(){var n=(0,r.Z)(["\n  query GetCustomerManagers($accountId: Int, $q: String, $limit: Int, $offset: Int) {\n    items: User(\n      where: { Account_Users: { accountId: { _eq: $accountId } }, fullName: { _ilike: $q } }\n      order_by: { fullName: asc }\n      limit: $limit\n      offset: $offset\n    ) {\n      label: fullName\n      value: id\n    }\n  }\n"]);return k=function(){return n},n}function C(){var n=(0,r.Z)(["\n  query GetServiceSchedulesForSelect(\n    $q: String\n    $serviceId: Int\n    $entity: service_schedule_entity\n    $entityId: Int\n    $limit: Int = 50\n    $offset: Int = 0\n  ) {\n    items: ServiceSchedule(\n      where: {\n        name: { _ilike: $q }\n        serviceId: { _eq: $serviceId }\n        entity: { _eq: $entity }\n        entityId: { _eq: $entityId }\n      }\n      limit: $limit\n      offset: $offset\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n"]);return C=function(){return n},n}function F(){var n=(0,r.Z)(['\n  query GetPropertyById($id: Int!) {\n    item: Location_by_pk(id: $id) {\n      label: name\n      value: id\n      access\n      registeredAddress: Addresses(\n        where: { entity: { _eq: "Location" }, registered: { _eq: true } }\n      ) {\n        address: Address {\n          id\n          addressLine1\n          addressLine2\n          addressLine3\n          county\n          country: Country {\n            name\n            code\n          }\n          postCode\n          city\n        }\n      }\n    }\n  }\n']);return F=function(){return n},n}function E(){var n=(0,r.Z)(['\n  query GetCompliancesForSelectNew($q: String, $locationId: Int, $limit: Int, $offset: Int) {\n    items: Compliance(\n      where: {\n        name: { _ilike: $q }\n        Category: { type: { _eq: "complianceCategory" } }\n        Compliance_Entities: { entity: { _eq: "Location" }, Location: { id: { _eq: $locationId } } }\n      }\n      order_by: { name: asc }\n      limit: $limit\n      offset: $offset\n    ) {\n      value: id\n      label: name\n      category: Category {\n        label: name\n      }\n    }\n  }\n']);return E=function(){return n},n}function A(){var n=(0,r.Z)(['\n  query GetTaskAssignedToForSelect(\n    $accountId: Int\n    $q: String\n    $limit: Int = 50\n    $offset: Int = 0\n  ) {\n    items: User(\n      where: {\n        status: { _eq: "active" }\n        Account_Users: { accountId: { _eq: $accountId }, status: { _eq: "active" } }\n        _or: [{ nameFirst: { _ilike: $q } }, { nameLast: { _ilike: $q } }]\n      }\n      limit: $limit\n      offset: $offset\n      order_by: { nameFirst: asc }\n    ) {\n      label: fullName\n      value: id\n    }\n  }\n']);return A=function(){return n},n}var G=(0,i.Ps)(o()),L=(0,i.Ps)(a()),U=(0,i.Ps)(s()),D=(0,i.Ps)(u()),R=(0,i.Ps)(c()),N=(0,i.Ps)(l()),Q=(0,i.Ps)(d()),z=(0,i.Ps)(f()),M=(0,i.Ps)(m()),O=(0,i.Ps)(y()),V=(0,i.Ps)($()),B=(0,i.Ps)(g()),J=(0,i.Ps)(_()),W=(0,i.Ps)(p()),H=(0,i.Ps)(q()),K=(0,i.Ps)(I()),X=(0,i.Ps)(v()),Y=(0,i.Ps)(h()),nn=(0,i.Ps)(b()),ne=(0,i.Ps)(x()),nt=(0,i.Ps)(Z()),nr=(0,i.Ps)(T()),ni=(0,i.Ps)(S());(0,i.Ps)(w()),(0,i.Ps)(P()),(0,i.Ps)(j());var no=(0,i.Ps)(k()),na=(0,i.Ps)(C()),ns=(0,i.Ps)(F()),nu=(0,i.Ps)(E()),nc=(0,i.Ps)(A())},22186:function(n,e,t){t.d(e,{V:function(){return d}});var r=t(26042),i=t(69396),o=t(85893),a=t(67294),s=t(45697),u=t.n(s),c=t(87918),l=t(41796),d=function(n){var e,t=n.chipProps,s=n.tagEntityId,u=n.name,d=n.color,f=n.onDelete,m=(0,a.useMemo)(function(){return f?(0,i.Z)((0,r.Z)({},t),{onDelete:function(n){n.stopPropagation(),f(s)}}):(0,r.Z)({},t)},[t,f,s]);return(0,o.jsx)(c.Z,(0,i.Z)((0,r.Z)({},m),{size:"small",label:u,sx:{fontSize:"11px",color:(e=d,(0,l.mi)(e,"#FFFFFF")>2.5?"#FFFFFF":"#000"),bgcolor:d,borderRadius:"0px 16px 16px 0px"}}))};d.defaultProps={chipProps:{},onDelete:null,color:"#f2f2f2"},d.propTypes={chipProps:u().object,tagEntityId:u().string.isRequired,name:u().string.isRequired,color:u().string.isRequired,onDelete:u().func.isRequired}},28864:function(n,e,t){t.d(e,{T:function(){return p}});var r=t(85893),i=t(45697),o=t.n(i),a=t(93946),s=t(97212),u=t(98619),c=t(59334),l=t(51233),d=t(50135),f=t(50594),m=t(40055),y=t(5336),$=t(10166),g=t(67294),_=t(42283),p=function(n){var e=n.tagEntityId,t=n.tagId,i=n.name,o=n.color,c=n.editable,$=n.onDelete,p=n.onColorChange,I=n.onNameChange,v=(0,_.cI)({defaultValues:{name:i,color:o}}),h=v.register,b=v.handleSubmit,x=(0,g.useState)(null),Z=x[0],T=x[1],S=function(){return[{icon:"delete",onClick:function(n){n.stopPropagation(),$(e)},tooltip:"Remove"},{icon:"edit",onClick:function(n){n.stopPropagation(),T("rename")},tooltip:"Rename"},{icon:"visibility",onClick:function(n){n.stopPropagation(),T("changeColor")},tooltip:"Change color"}]},w=function(n){n.stopPropagation(),T(null)},P=function(n){p({tagId:t,color:n.color}),T(null)},j=function(n){I({tagId:t,name:n.name}),T(null)};return(0,r.jsx)(s.ZP,{disablePadding:!0,secondaryAction:!c||!Z&&(0,r.jsx)(y.C,{icon:"defaultHoriz",actionsData:S}),children:Z?({changeColor:function(){return(0,r.jsxs)(l.Z,{width:"100%",direction:"row",justifyContent:"space-between",alignItems:"center",pl:"16px",pr:"16px",children:[(0,r.jsx)("input",{name:"color",ref:h,type:"color",style:{padding:0,border:"none","background-color":"unset"}}),(0,r.jsxs)(l.Z,{direction:"row",alignItems:"center",children:[(0,r.jsx)(a.Z,{size:"small",color:"danger",onClick:w,children:(0,r.jsx)(f.Z,{})}),(0,r.jsx)(a.Z,{size:"small",color:"success",onClick:b(P),children:(0,r.jsx)(m.Z,{})})]})]})},rename:function(){return(0,r.jsxs)(l.Z,{width:"100%",direction:"row",justifyContent:"space-between",alignItems:"center",pl:"16px",pr:"16px",children:[(0,r.jsx)(d.Z,{name:"name",inputRef:h,variant:"standard",color:"secondary"}),(0,r.jsxs)(l.Z,{direction:"row",alignItems:"center",children:[(0,r.jsx)(a.Z,{size:"small",color:"danger",onClick:w,children:(0,r.jsx)(f.Z,{})}),(0,r.jsx)(a.Z,{size:"small",color:"success",onClick:b(j),children:(0,r.jsx)(m.Z,{})})]})]})}})[Z]():(0,r.jsx)(u.Z,{children:(0,r.jsx)(q,{primary:i,color:o})})},t)};p.defaultProps={onDelete:function(){},onColorChange:function(){},onNameChange:function(){},editable:!0},p.propTypes={tagEntityId:o().string.isRequired,tagId:o().string.isRequired,name:o().string.isRequired,color:o().string.isRequired,editable:o().bool,onDelete:o().func.isRequired,onColorChange:o().func.isRequired,onNameChange:o().func.isRequired};var q=(0,$.Z)(c.Z)(function(n){return n.theme,{"&.MuiListItemText-root .MuiListItemText-primary":{fontWeight:700,color:n.color}}})},48381:function(n,e,t){t.d(e,{K:function(){return C}});var r=t(828),i=t(29815),o=t(85893),a=t(45697),s=t.n(a),u=t(50319),c=t(51738),l=t(26042),d=t(69396),f=t(67294),m=t(6388),y=t(11961),$=t(93362),g=t(23776),_=t(5616),p=t(98456),q=t(93946),I=t(78462),v=t(18972),h=t(14564),b=t(51233),x=t(50135),Z=t(28864),T=t(10166),S=t(2845),w=(0,$.D)(),P=function(n){var e=n.entityId,t=(n.getTagsForEntityQuery,n.getTagsForEntityVariables,n.refetchQueries),a=n.entity,s=n.handleDeleteTagEntity,$=(0,S.x)().user,h=(0,f.useState)(null),T=h[0],P=h[1],k=(0,f.useState)(""),C=k[0],F=k[1],E=(0,f.useState)(""),A=E[0],G=E[1],L=(0,f.useState)(""),U=L[0],D=L[1],R=(0,m.aM)(c.BU,{skip:!T,variables:{entityId:e,entity:a}}),N=R.data,Q=(void 0===N?{tags:[]}:N).tags,z=R.loading,M=(0,m.aM)(c.gI,{skip:!T,variables:{entityId:e,entity:a,q:""!==U?"%".concat(U,"%"):null}}),O=M.data,V=(void 0===O?{tags:[]}:O).tags,B=M.loading,J=(0,r.Z)((0,u.D)(c.LE,{refetchQueries:["GetAllTags"].concat((0,i.Z)(t)),onCompleted:function(){G(""),F(null)}}),2),W=J[0],H=J[1].loading,K=(0,r.Z)((0,u.D)(c.g$,{refetchQueries:["GetAllTags"].concat((0,i.Z)(t))}),2),X=K[0],Y=K[1].loading;(0,f.useEffect)(function(){var n=setTimeout(function(){D(A)},500);return function(){return clearTimeout(n)}},[A]);var nn=function(n){n.stopPropagation(),P(n.currentTarget)},ne=function(){P(null)},nt=function(n,t){"string"==typeof t?F({label:t}):t&&t.inputValue?(W({variables:{objects:[{entity:a,entityId:e,Taxonomy:{data:{type:"tags",status:"active",name:t.inputValue,meta:{color:"#0679d8"},isGroup:!1,adminId:$.adminId}}}]}}),F(null)):t&&t.value&&(W({variables:{objects:[{entity:a,entityId:e,taxonomyId:t.value}]}}),F(null))},nr=function(n,e){var t=w(n,e),r=e.inputValue,i=n.some(function(n){return r===n.label});return""===r||i||t.push({inputValue:r,label:'Add "'.concat(r,'"')}),t},ni=function(n){return"string"==typeof n?n:n.inputValue?n.inputValue:n.label},no=function(n){var e;X({variables:{tagId:n.tagId,object:{meta:{color:n.color}}}})},na=function(n){var e;X({variables:{tagId:n.tagId,object:{name:n.name}}})},ns=Boolean(T),nu=null==V?void 0:V.map(function(n){return{label:n.name,value:n.id}});return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(j,{id:ns?"tags-popover":void 0,open:ns,anchorEl:T,onClose:ne,anchorOrigin:{vertical:"top",horizontal:"right"},children:(0,o.jsxs)(_.Z,{sx:{maxHeight:"80vh",width:"280px",p:"10px",pt:"5px"},children:[(0,o.jsx)(g.Z,{freeSolo:!0,selectOnFocus:!0,clearOnBlur:!0,handleHomeEndKeys:!0,options:nu,value:C,onChange:nt,onInputChange:function(n,e){G(e)},filterOptions:nr,getOptionLabel:ni,renderOption:function(n,e){return(0,o.jsx)(v.Z,(0,d.Z)((0,l.Z)({},n),{children:e.label}))},renderInput:function(n){return(0,o.jsx)(x.Z,(0,d.Z)((0,l.Z)({},n),{variant:"standard",color:"secondary",label:"Search tag",InputProps:(0,d.Z)((0,l.Z)({},n.InputProps),{endAdornment:(0,o.jsxs)(o.Fragment,{children:[B||H?(0,o.jsx)(p.Z,{color:"inherit",size:20}):null,n.InputProps.endAdornment]})})}))},sx:{pl:"16px",pr:"16px"}}),z||Y?(0,o.jsx)(b.Z,{width:"100%",alignItems:"center",p:4,children:(0,o.jsx)(p.Z,{color:"secondary"})}):(0,o.jsx)(I.Z,{children:Q.map(function(n){var e;return(0,o.jsx)(Z.T,{tagEntityId:n.id,tagId:n.tag.id,name:n.tag.name,color:null===(e=n.tag.meta)||void 0===e?void 0:e.color,onDelete:s,onColorChange:no,onNameChange:na})})})]})}),(0,o.jsx)(q.Z,{color:"black",onClick:nn,children:(0,o.jsx)(y.Z,{sx:{height:"16px",width:"16px"}})})]})};P.defaultProps={entityId:null,entity:null,refetchQueries:[],handleDeleteTagEntity:function(){}},P.propTypes={entityId:s().number,entity:s().string,getTagsForEntityQuery:s().object,getTagsForEntityVariables:s().object,refetchQueries:s().array,handleDeleteTagEntity:s().func};var j=(0,T.Z)(h.ZP)(function(n){return n.theme,{"& .MuiPaper-root":{borderRadius:"12px"}}}),k=t(11975),C=function(n){var e=n.row,t=n.refetchQueries,a=n.entity,s=(0,r.Z)((0,u.D)(c.cS,{refetchQueries:["GetTaskTags"].concat((0,i.Z)(t))}),1)[0],l=function(n){s({variables:{tagEntityId:n}})};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(k.P,{tags:e.tags,title:e.title,handleDeleteTagEntity:l}),(0,o.jsx)(P,{entityId:e.id,refetchQueries:t,handleDeleteTagEntity:l,entity:a})]})};C.propTypes={row:s().object,refetchQueries:s().array},C.defaultProps={row:{},displayOnly:!1,refetchQueries:[],handleDeleteTagEntity:function(){}}},11975:function(n,e,t){t.d(e,{P:function(){return m}});var r=t(85893),i=t(67294),o=t(45697),a=t.n(o),s=t(15861),u=t(14564),c=t(78462),l=t(51233),d=t(22186),f=t(28864),m=function(n){var e=n.tags,t=(n.title,n.handleDeleteTagEntity),o=(0,i.useState)(null),a=o[0],m=o[1],y=null==e?void 0:e.slice(0,5),$=(null==e?void 0:e.length)-(null==y?void 0:y.length),g=Boolean(a);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(l.Z,{direction:"row",spacing:1,children:y.map(function(n,e){var i;return(0,r.jsx)(d.V,{tagEntityId:n.id||e,name:n.tag.name,color:null===(i=n.tag.meta)||void 0===i?void 0:i.color,onDelete:t})})}),$>0&&(0,r.jsxs)(s.Z,{fontWeight:700,ml:1,onMouseEnter:function(n){m(n.currentTarget),n.stopPropagation()},children:["+",$]}),(0,r.jsx)(u.ZP,{id:g?"tags-in-table-popover":void 0,open:g,anchorEl:a,onClose:function(){return m(null)},anchorOrigin:{vertical:"top",horizontal:"right"},children:(0,r.jsx)(c.Z,{children:null==e?void 0:e.map(function(n){var e;return(0,r.jsx)(f.T,{tagEntityId:n.id,tagId:n.tag.id,name:n.tag.name,color:null===(e=n.tag.meta)||void 0===e?void 0:e.color,editable:!1},n.tag.id)})})})]})};m.propTypes={tags:a().object,title:a().string},m.defaultProps={tags:{},displayOnly:!1,refetchQueries:[],handleDeleteTagEntity:function(){}}},57179:function(n,e,t){t.d(e,{r:function(){return $}});var r=t(26042),i=t(69396),o=t(828),a=t(85893),s=t(67294),u=t(42283),c=t(73359),l=t(23776),d=t(98456),f=t(50135),m=t(87918),y=t(51738),$=function(n){var e=n.control,t=(0,s.useState)(""),$=t[0],g=t[1],_=(0,s.useState)(""),p=_[0],q=_[1],I=(0,o.Z)((0,c.t)(y.lx,{variables:{q:""!==p?"%".concat(p,"%"):null}}),2),v=I[0],h=I[1],b=h.loading,x=h.data,Z=(void 0===x?{items:[]}:x).items;return(0,s.useEffect)(function(){var n=setTimeout(function(){q($)},500);return function(){return clearTimeout(n)}},[$]),(0,a.jsx)(u.Qr,{control:e,name:"tags",render:function(n){var e=n.value,t=n.onChange;return(0,a.jsx)(l.Z,{multiple:!0,limitTags:6,color:"secondary",onOpen:function(){return v()},options:Z,value:e||[],inputValue:$,onChange:function(n,e){t(e)},onInputChange:function(n,e){g(e)},getOptionLabel:function(n){return n.label},renderTags:function(n,e){return n.map(function(n,t){return(0,a.jsx)(m.Z,(0,r.Z)({size:"small",label:n.label},e({index:t})),t)})},renderInput:function(n){return(0,a.jsx)(f.Z,(0,i.Z)((0,r.Z)({},n),{variant:"standard",color:"secondary",label:"Select tags",InputProps:(0,i.Z)((0,r.Z)({},n.InputProps),{endAdornment:(0,a.jsxs)(a.Fragment,{children:[b?(0,a.jsx)(d.Z,{color:"inherit",size:20}):null,n.InputProps.endAdornment]})})}))}})}})}},51738:function(n,e,t){t.d(e,{Aw:function(){return h},BU:function(){return g},C3:function(){return v},LE:function(){return p},Zm:function(){return $},cS:function(){return q},g$:function(){return I},gI:function(){return y},lx:function(){return _}});var r=t(7297),i=t(75063);function o(){var n=(0,r.Z)(['\n  query GetTagsForEntity($q: String!, $limit: Int = 50, $offset: Int = 0) {\n    tags: Taxonomy(\n      where: { name: { _ilike: $q }, status: { _eq: "active" }, type: { _eq: "tags" } }\n      limit: $limit\n      offset: $offset\n      order_by: { id: desc }\n    ) {\n      id\n      name\n      meta\n    }\n  }\n']);return o=function(){return n},n}function a(){var n=(0,r.Z)(["\n  mutation CreateTag($objects: [Taxonomy_insert_input!]!) {\n    insert_Taxonomy(objects: $objects) {\n      returning {\n        id\n        name\n        meta\n      }\n    }\n  }\n"]);return a=function(){return n},n}function s(){var n=(0,r.Z)(['\n  query GetEntityTags($entityId: Int!, $entity: String!) {\n    tags: Taxonomy_Entity(\n      where: {\n        entity: { _eq: $entity }\n        entityId: { _eq: $entityId }\n        Taxonomy: { status: { _eq: "active" }, type: { _eq: "tags" } }\n      }\n      order_by: { id: desc }\n    ) {\n      id\n      tag: Taxonomy {\n        id\n        name\n        meta\n      }\n    }\n  }\n']);return s=function(){return n},n}function u(){var n=(0,r.Z)(['\n  query GetTagsForSelect($q: String!, $limit: Int = 50, $offset: Int = 0) {\n    items: Taxonomy(\n      where: { name: { _ilike: $q }, status: { _eq: "active" }, type: { _eq: "tags" } }\n      limit: $limit\n      offset: $offset\n      order_by: { id: desc }\n    ) {\n      value: id\n      label: name\n    }\n  }\n']);return u=function(){return n},n}function c(){var n=(0,r.Z)(["\n  mutation CreateTagsAgainstEntity($objects: [Taxonomy_Entity_insert_input!]!) {\n    insert_Taxonomy_Entity(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n"]);return c=function(){return n},n}function l(){var n=(0,r.Z)(["\n  mutation DeleteTagAgainstEntity($tagEntityId: Int!) {\n    delete_Taxonomy_Entity_by_pk(id: $tagEntityId) {\n      id\n      taxonomyId\n    }\n  }\n"]);return l=function(){return n},n}function d(){var n=(0,r.Z)(["\n  mutation UpdateTagAgainstEntity($tagId: Int!, $object: Taxonomy_set_input!) {\n    update_Taxonomy_by_pk(pk_columns: { id: $tagId }, _set: $object) {\n      id\n      name\n      meta\n    }\n  }\n"]);return d=function(){return n},n}function f(){var n=(0,r.Z)(["\n  mutation CreateTagsAgainstEntityWithFollowing($objects: [Taxonomy_Entity_insert_input!]!) {\n    insert_Taxonomy_Entity(objects: $objects) {\n      returning {\n        id\n        taxonomyId\n      }\n    }\n  }\n"]);return f=function(){return n},n}function m(){var n=(0,r.Z)(["\n  mutation DeleteTagAgainstEntityWithFollowing($where: Taxonomy_Entity_bool_exp!) {\n    delete_Taxonomy_Entity(where: $where) {\n      returning {\n        id\n        taxonomyId\n      }\n    }\n  }\n"]);return m=function(){return n},n}var y=(0,i.Ps)(o()),$=(0,i.Ps)(a()),g=(0,i.Ps)(s()),_=(0,i.Ps)(u()),p=(0,i.Ps)(c()),q=(0,i.Ps)(l()),I=(0,i.Ps)(d()),v=(0,i.Ps)(f()),h=(0,i.Ps)(m())},59938:function(n,e,t){t.d(e,{X:function(){return y}});var r=t(14924),i=t(82670),o=t(828),a=t(7297),s=t(67294),u=t(6388),c=t(50319),l=t(75063),d=t(18586);function f(){var n=(0,a.Z)(["\n  query GetAccountUserFilters($accountUserId: Int!) {\n    accountUser: Account_User_by_pk(id: $accountUserId) {\n      filters\n    }\n  }\n"]);return f=function(){return n},n}function m(){var n=(0,a.Z)(["\n  mutation SetAccountUserFilters($accountUserId: Int!, $filters: jsonb) {\n    update_Account_User_by_pk(pk_columns: { id: $accountUserId }, _append: { filters: $filters }) {\n      id\n    }\n  }\n"]);return m=function(){return n},n}function y(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"sessionStorage",a=(0,d.q)().user,l=(0,s.useState)(function(){try{switch(t){case"network":case"state":return e;case"sessionStorage":return JSON.parse(window.sessionStorage.getItem(n))||e}}catch(r){return e}}),f=l[0],m=l[1],y=function(e){try{var o=(0,i.Z)(e,Function)?e(f):e;switch(m(o),t){case"network":_({variables:{accountUserId:null==a?void 0:a.accountUserId,filters:(0,r.Z)({},n,o)}});break;case"sessionStorage":window.sessionStorage.setItem(n,JSON.stringify(o))}}catch(s){}};(0,u.aM)($,{variables:{accountUserId:null==a?void 0:a.accountUserId},skip:"network"!==t,onCompleted:function(t){var r=t.accountUser;r&&m(r.filters[n]||e)}});var _=(0,o.Z)((0,c.D)(g),1)[0];return[f,y]}var $=(0,l.Ps)(f()),g=(0,l.Ps)(m())}}]);